{"version":3,"file":"static/js/861.936c34c2.chunk.js","mappings":"mPAEaA,E,QAAOC,GAAAA,KAAH,6C,SCEF,SAASC,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SACnC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAYA,OACE,+BACE,UAACN,EAAD,CAAMG,SAZY,SAAAI,GACpBA,EAAEC,iBACFL,EAASE,GAETC,EAAU,GACX,EAOG,WACE,kBACEG,SARc,SAAAF,GACpBD,EAAUC,EAAEG,OAAOC,MACpB,EAOOC,KAAMP,EACNM,MAAON,EACPQ,KAAK,UAEP,mBAAQA,KAAK,SAAb,wBAIP,C,iCCzBc,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BZ,EAAAA,EAAAA,UAAS,IAAnC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAA4Bd,EAAAA,EAAAA,UAAS,IAArC,eAAOe,EAAP,KAAeC,EAAf,KACA,GAA0BhB,EAAAA,EAAAA,WAAS,GAAnC,eAAOiB,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAEN,MAAO,KAAjE,eAAOO,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,kGAEIJ,GAAS,GAEW,MADdK,EAAcH,EAAaI,IAAI,UAHzC,kEAQ4BC,EAAAA,EAAAA,IAAgBF,GAR5C,UAQUG,EARV,OASIV,EAAUU,GACe,IAArBA,EAAUC,OAVlB,0CAWaT,EAAS,yBAAD,OAA0BK,EAA1B,QAXrB,0DAcIL,EACE,mEAfN,2DADc,uBAAC,WAAD,wBAqBdU,EACD,GAAE,CAACf,EAAOO,IAOX,OACE,iCACE,SAACtB,EAAD,CAAYC,SAPM,SAAA8B,GACpBR,EAAgB,CAAER,MAAOgB,IACzBf,EAASe,EACV,IAMId,EAAOY,OAAS,IACf,wBACGZ,EAAOe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMxB,GAAlC,SACGqB,KAFID,EADC,MAUfd,IAGN,C","sources":["components/MoviesForm/MoviesForm.styled.js","components/MoviesForm/MoviesForm.js","pages/Movies/Movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 30px;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from './MoviesForm.styled';\n\nexport default function MoviesForm({ onSubmit }) {\n  const [search, setSearch] = useState('');\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n    onSubmit(search);\n\n    setSearch('');\n  };\n  const handlerChange = e => {\n    setSearch(e.target.value);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handlerSubmit}>\n        <input\n          onChange={handlerChange}\n          name={search}\n          value={search}\n          type=\"text\"\n        />\n        <button type=\"submit\">Search</button>\n      </Form>\n    </>\n  );\n}\nMoviesForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import MoviesForm from 'components/MoviesForm/MoviesForm';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getSearchMovies } from 'services/api';\n\nexport default function Movies() {\n  const location = useLocation();\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams({ query: '' });\n\n  useEffect(() => {\n    async function searchMovies() {\n      try {\n        setError(false);\n        const searchQuery = searchParams.get('query');\n        if (searchQuery === '') {\n          return;\n        }\n\n        const getMovies = await getSearchMovies(searchQuery);\n        setMovies(getMovies);\n        if (getMovies.length === 0) {\n          return setError(`No results found for \"${searchQuery}\".`);\n        }\n      } catch (error) {\n        setError(\n          'Ouch! Something went wrong: Reload the page and try again once.'\n        );\n      }\n    }\n\n    searchMovies();\n  }, [query, searchParams]);\n\n  const handlerSubmit = newQuery => {\n    setSearchParams({ query: newQuery });\n    setQuery(newQuery);\n  };\n\n  return (\n    <>\n      <MoviesForm onSubmit={handlerSubmit} />\n\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {error}\n    </>\n  );\n}\n"],"names":["Form","styled","MoviesForm","onSubmit","useState","search","setSearch","e","preventDefault","onChange","target","value","name","type","Movies","location","useLocation","query","setQuery","movies","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","useEffect","searchQuery","get","getSearchMovies","getMovies","length","searchMovies","newQuery","map","id","title","to","state","from"],"sourceRoot":""}